[
    {
        "id": "11307a2a2fe08886",
        "type": "tab",
        "label": "플로우 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d03e8a33a211020e",
        "type": "comment",
        "z": "11307a2a2fe08886",
        "name": "error debuging",
        "info": "",
        "x": 1540,
        "y": 1560,
        "wires": []
    },
    {
        "id": "e11acc3dbe0f05f9",
        "type": "comment",
        "z": "11307a2a2fe08886",
        "name": "InfluxDB에서 데이터 한번에 받아오기",
        "info": "",
        "x": 170,
        "y": 60,
        "wires": []
    },
    {
        "id": "f1619e56cd0ec201",
        "type": "catch",
        "z": "11307a2a2fe08886",
        "name": "Catch Errors",
        "scope": null,
        "uncaught": false,
        "x": 1530,
        "y": 1620,
        "wires": [
            [
                "2e3cd6e441b0534c"
            ]
        ]
    },
    {
        "id": "2e3cd6e441b0534c",
        "type": "debug",
        "z": "11307a2a2fe08886",
        "name": "Error Debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "msg",
        "x": 1810,
        "y": 1620,
        "wires": []
    },
    {
        "id": "55198e114afa0997",
        "type": "debug",
        "z": "11307a2a2fe08886",
        "name": "Show Query Result",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 240,
        "wires": []
    },
    {
        "id": "957cb30ab7ab36f6",
        "type": "inject",
        "z": "11307a2a2fe08886",
        "name": "Get Latest Data",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 240,
        "wires": [
            [
                "162944b7b8492223"
            ]
        ]
    },
    {
        "id": "162944b7b8492223",
        "type": "influxdb in",
        "z": "11307a2a2fe08886",
        "influxdb": "influxdb1",
        "name": "전력 데이터 가져오기",
        "query": "from(bucket: \"AMPds2\")\n  |> range(start: 2012-04-08T00:00:00Z, stop: 2014-04-08T10:00:00Z)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"Electricity_B2E.csv_measurements\")\n  |> filter(fn: (r) => r[\"_field\"] == \"active_power\")",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "atg_intern",
        "x": 400,
        "y": 240,
        "wires": [
            [
                "55198e114afa0997",
                "8c06861d7ffd5a7b",
                "57452ce296e6f789"
            ]
        ]
    },
    {
        "id": "8c06861d7ffd5a7b",
        "type": "function",
        "z": "11307a2a2fe08886",
        "name": "chart로 나타내기 위한 변환",
        "func": "let data = msg.payload; // InfluxDB에서 가져온 데이터를 msg.payload로 받음\nlet chartData = [];\n\n// 데이터를 반복하여 차트 형식으로 변환\nfor (let i = 0; i < data.length; i++) {\n    chartData.push({\n        \"x\": new Date(data[i]._time).getTime(), // 타임스탬프를 밀리초로 변환\n        \"y\": data[i]._value // active_power 값을 y축 값으로 설정\n    });\n}\n\n// ui_chart에 맞는 형식으로 msg.payload 설정\nmsg.payload = [{\n    \"series\": [\"Active Power\"], // 차트의 시리즈 이름 설정\n    \"data\": [chartData], // 변환된 데이터 배열\n    \"labels\": [\"\"] // 빈 레이블 (필요 시 수정 가능)\n}];\n\nreturn msg; // 변환된 데이터를 반환하여 ui_chart로 전달\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 400,
        "wires": [
            [
                "5b80b54956c55f12"
            ]
        ]
    },
    {
        "id": "5b80b54956c55f12",
        "type": "ui_chart",
        "z": "11307a2a2fe08886",
        "name": "electricity active power",
        "group": "dashboard-group-id",
        "order": 1,
        "width": 0,
        "height": 0,
        "label": "chart",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": "3000",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#0973be",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1060,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "ddf5ab133e9b6715",
        "type": "inject",
        "z": "11307a2a2fe08886",
        "name": "Start Query",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 660,
        "wires": [
            [
                "9103003f7b9d8523"
            ]
        ]
    },
    {
        "id": "9103003f7b9d8523",
        "type": "function",
        "z": "11307a2a2fe08886",
        "name": "Prepare Flux Query",
        "func": "msg.query = `from(bucket: \"AMPds2\")\n  |> range(start: 2012-04-09T21:04:00Z, stop: 2012-04-10T09:15:00Z)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"Electricity_B2E.csv_measurements\")\n  |> filter(fn: (r) => r[\"_field\"] == \"active_power\")`;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 660,
        "wires": [
            [
                "386bfa63d22699d3"
            ]
        ]
    },
    {
        "id": "0c196ad5a085f293",
        "type": "function",
        "z": "11307a2a2fe08886",
        "name": "일정 시간 간격으로 데이터 받아오기",
        "func": "let data = context.get('data') || [];\nlet currentIndex = context.get('currentIndex') || 0;\n\nif (data.length === 0) {\n    data = msg.payload;\n    context.set('data', data);\n    currentIndex = 0;\n}\n\nif (currentIndex < data.length) {\n    let currentRow = data[currentIndex];\n    msg.payload = currentRow;\n    context.set('currentIndex', currentIndex + 1);\n} else {\n    msg.payload = \"No more data\";\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 660,
        "wires": [
            [
                "3948d94a194a70fc",
                "bcd835d1116d6b81",
                "f23beeb214788fa4",
                "3"
            ]
        ]
    },
    {
        "id": "3948d94a194a70fc",
        "type": "debug",
        "z": "11307a2a2fe08886",
        "name": "받아온 데이터 보여주기. 1 row",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1400,
        "y": 580,
        "wires": []
    },
    {
        "id": "386bfa63d22699d3",
        "type": "influxdb in",
        "z": "11307a2a2fe08886",
        "influxdb": "influxdb1",
        "name": "Fetch Electricity Data",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "atg_intern",
        "x": 620,
        "y": 660,
        "wires": [
            [
                "0c196ad5a085f293"
            ]
        ]
    },
    {
        "id": "a17919a197013e2a",
        "type": "comment",
        "z": "11307a2a2fe08886",
        "name": "data streaming ",
        "info": "# 일정 간격으로 전체데이터에서 뽑아오기\n=> 실시간 데이터 처럼 사용 가능\n\n",
        "x": 140,
        "y": 500,
        "wires": []
    },
    {
        "id": "bcd835d1116d6b81",
        "type": "function",
        "z": "11307a2a2fe08886",
        "name": "Format for chart",
        "func": "// msg.payload에 들어있는 데이터를 사용해 차트 데이터 준비\nlet row = msg.payload; // 현재 데이터는 한 번에 한 row씩 들어옴\n\n// 차트용 데이터 배열이 존재하지 않으면 생성\nlet chartData = context.get('chartData') || [];\n\n// 현재 row의 타임스탬프와 값을 추출해 차트용 데이터로 변환\nchartData.push({\n    \"x\": new Date(row._time).getTime(), // _time 필드를 밀리초로 변환\n    \"y\": row._value // active_power 값을 y축 값으로 설정\n});\n\n// 차트 데이터 배열이 3000개 이상이면 오래된 데이터 제거\nif (chartData.length > 3000) {\n    chartData.shift(); // 오래된 데이터 제거\n}\n\n// ui_chart에 맞는 형식으로 msg.payload 설정\nmsg.payload = [{\n    \"series\": [\"Active Power\"], // 차트의 시리즈 이름 설정\n    \"data\": [chartData], // 변환된 데이터 배열\n    \"labels\": [\"\"] // 빈 레이블 (필요 시 수정 가능)\n}];\n\n// 업데이트된 chartData를 context에 저장하여 이후 사용\ncontext.set('chartData', chartData);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1340,
        "y": 780,
        "wires": [
            [
                "67ecf9932f8e2bd9"
            ]
        ]
    },
    {
        "id": "67ecf9932f8e2bd9",
        "type": "ui_chart",
        "z": "11307a2a2fe08886",
        "name": "electricity active power - chart",
        "group": "cb0e6dfde30c2ae0",
        "order": 1,
        "width": 8,
        "height": 7,
        "label": "chart",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": "300",
        "removeOlderPoints": "200",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#0973be",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1630,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "57452ce296e6f789",
        "type": "function",
        "z": "11307a2a2fe08886",
        "name": "Format as CSV",
        "func": "let data = msg.payload;\nlet csvData = [];\n\n// CSV 헤더 설정\ncsvData.push([\"_time\", \"_value\", \"_field\", \"_measurement\"]);\n\n// 데이터를 순차적으로 처리하여 CSV로 변환\nfor (let i = 0; i < data.length; i++) {\n    let row = data[i];\n    csvData.push([\n        row._time,        // 시간\n        row._value,       // 값\n        row._field,       // 필드 (active_power)\n        row._measurement  // 측정값 (Electricity_B2E.csv_measurements)\n    ]);\n}\n\nmsg.payload = csvData; // CSV 데이터로 변환된 배열을 payload로 설정\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 120,
        "wires": [
            [
                "f010ab0f2d971536"
            ]
        ]
    },
    {
        "id": "c3635e13499ab0e5",
        "type": "file",
        "z": "11307a2a2fe08886",
        "name": "Save CSV File",
        "filename": "C:\\Users\\devYong\\output_csv\\output.csv",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1100,
        "y": 120,
        "wires": [
            [
                "a24ff766d0976b5a"
            ]
        ]
    },
    {
        "id": "a24ff766d0976b5a",
        "type": "debug",
        "z": "11307a2a2fe08886",
        "name": "csv 저장 결과 확인",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1340,
        "y": 120,
        "wires": []
    },
    {
        "id": "f010ab0f2d971536",
        "type": "csv",
        "z": "11307a2a2fe08886",
        "name": "Convert to CSV",
        "sep": ",",
        "hdrin": "",
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 900,
        "y": 120,
        "wires": [
            [
                "c3635e13499ab0e5"
            ]
        ]
    },
    {
        "id": "6",
        "type": "file in",
        "z": "11307a2a2fe08886",
        "name": "Read CSV File",
        "filename": "C:\\Users\\devYong\\output_csv\\output.csv",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1830,
        "y": 160,
        "wires": [
            [
                "7"
            ]
        ]
    },
    {
        "id": "7",
        "type": "debug",
        "z": "11307a2a2fe08886",
        "name": "Show CSV Content",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2040,
        "y": 160,
        "wires": []
    },
    {
        "id": "cb47c250250cabce",
        "type": "inject",
        "z": "11307a2a2fe08886",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1640,
        "y": 160,
        "wires": [
            [
                "6"
            ]
        ]
    },
    {
        "id": "5",
        "type": "e-mail",
        "z": "11307a2a2fe08886",
        "d": true,
        "server": "",
        "port": "",
        "authtype": "BASIC",
        "saslformat": false,
        "token": "oauth2Response.access_token",
        "secure": false,
        "tls": false,
        "name": "Send Email",
        "dname": "",
        "x": 2310,
        "y": 480,
        "wires": []
    },
    {
        "id": "120464305accb8e3",
        "type": "link in",
        "z": "11307a2a2fe08886",
        "name": "link in 1",
        "links": [
            "c450beed80aa8d3c"
        ],
        "x": 2015,
        "y": 580,
        "wires": [
            [
                "5",
                "0008fee539c6c325"
            ]
        ]
    },
    {
        "id": "c450beed80aa8d3c",
        "type": "link out",
        "z": "11307a2a2fe08886",
        "name": "link out 1",
        "mode": "link",
        "links": [
            "120464305accb8e3"
        ],
        "x": 1495,
        "y": 460,
        "wires": []
    },
    {
        "id": "b439a29e4dd7f04b",
        "type": "comment",
        "z": "11307a2a2fe08886",
        "name": "Alert 처리",
        "info": "",
        "x": 1980,
        "y": 460,
        "wires": []
    },
    {
        "id": "e6ba557447d0d14c",
        "type": "comment",
        "z": "11307a2a2fe08886",
        "name": "파일 읽어와서 보여주기",
        "info": "",
        "x": 1660,
        "y": 80,
        "wires": []
    },
    {
        "id": "85b38adca407564d",
        "type": "ui_gauge",
        "z": "11307a2a2fe08886",
        "name": "Electricity Active Power - Gauge",
        "group": "cb0e6dfde30c2ae0",
        "order": 4,
        "width": 5,
        "height": 5,
        "gtype": "gage",
        "title": "Active Power : gage",
        "label": "Watts",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": 1000,
        "seg2": 3000,
        "diff": false,
        "className": "",
        "x": 1630,
        "y": 680,
        "wires": []
    },
    {
        "id": "f23beeb214788fa4",
        "type": "function",
        "z": "11307a2a2fe08886",
        "name": "Format for Gauge",
        "func": "// _value 값 추출 및 게이지용 데이터 포매팅\nif (msg.payload && msg.payload._value !== undefined) {\n    msg.payload = msg.payload._value; // _value 값을 게이지에 전달\n    msg.min = 0;  // 게이지 최소값 (필요에 맞게 설정)\n    msg.max = 1000; // 게이지 최대값 (필요에 맞게 설정)\n    return msg;\n} else {\n    // 데이터가 없을 경우 처리\n    msg.payload = \"No valid data\";\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 680,
        "wires": [
            [
                "85b38adca407564d"
            ]
        ]
    },
    {
        "id": "1740c4362dd559b0",
        "type": "ui_audio",
        "z": "11307a2a2fe08886",
        "name": "안내방송",
        "group": "cb0e6dfde30c2ae0",
        "voice": "Google US English",
        "always": true,
        "x": 2440,
        "y": 580,
        "wires": []
    },
    {
        "id": "0008fee539c6c325",
        "type": "function",
        "z": "11307a2a2fe08886",
        "name": "알람 문구 설정",
        "func": "let numberValue = msg.payload._value;\n\nmsg.payload = \"Danger! power value is over 30. the value is \" + numberValue;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2200,
        "y": 580,
        "wires": [
            [
                "1740c4362dd559b0",
                "6ea83bf2c68b9588"
            ]
        ]
    },
    {
        "id": "6ea83bf2c68b9588",
        "type": "ui_toast",
        "z": "11307a2a2fe08886",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "Power Usage Alert",
        "name": "위험 모듈",
        "x": 2440,
        "y": 660,
        "wires": []
    },
    {
        "id": "3",
        "type": "switch",
        "z": "11307a2a2fe08886",
        "name": "Check Threshold",
        "property": "payload._value",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "40",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1350,
        "y": 460,
        "wires": [
            [
                "c450beed80aa8d3c"
            ]
        ]
    },
    {
        "id": "79d9833ec32beb09",
        "type": "comment",
        "z": "11307a2a2fe08886",
        "name": "PostgreSQL 연동",
        "info": "",
        "x": 120,
        "y": 820,
        "wires": []
    },
    {
        "id": "http_login_page",
        "type": "http in",
        "z": "11307a2a2fe08886",
        "name": "Login Page",
        "url": "/login",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 1540,
        "wires": [
            [
                "send_login_form"
            ]
        ]
    },
    {
        "id": "http_response",
        "type": "http response",
        "z": "11307a2a2fe08886",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 650,
        "y": 1540,
        "wires": []
    },
    {
        "id": "send_login_form",
        "type": "template",
        "z": "11307a2a2fe08886",
        "name": "Send Login Form",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<html>\n    <body>\n        <h1>Login</h1>\n        <form method='POST' action='/login'>\n            Username:<br><input type='text' name='username'><br>Password:<br><input type='password' name='password'><br><input type='submit' value='Login'>\n            </form>\n        </body>\n        </html>",
        "x": 400,
        "y": 1540,
        "wires": [
            [
                "http_response"
            ]
        ]
    },
    {
        "id": "http_login_submit",
        "type": "http in",
        "z": "11307a2a2fe08886",
        "name": "Login Submit",
        "url": "/login",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 1680,
        "wires": [
            [
                "authenticate_user"
            ]
        ]
    },
    {
        "id": "authenticate_user",
        "type": "function",
        "z": "11307a2a2fe08886",
        "name": "Authenticate User",
        "func": "let users = {\n    'admin': 'password123',\n    'user1': 'pass1234'\n};\n\nlet username = msg.req.body.username;\nlet password = msg.req.body.password;\n\nif (users[username] && users[username] === password) {\n    msg.payload = { success: true, message: 'Login successful' };\n    msg.authenticated = true;\n} else {\n    msg.payload = { success: false, message: 'Invalid username or password' };\n    msg.authenticated = false;\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 1680,
        "wires": [
            [
                "handle_login_result"
            ]
        ]
    },
    {
        "id": "handle_login_result",
        "type": "switch",
        "z": "11307a2a2fe08886",
        "name": "Handle Login Result",
        "property": "authenticated",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 650,
        "y": 1680,
        "wires": [
            [
                "login_success"
            ],
            [
                "login_failure"
            ]
        ]
    },
    {
        "id": "login_success",
        "type": "http response",
        "z": "11307a2a2fe08886",
        "name": "Login Success",
        "statusCode": "",
        "headers": {},
        "x": 900,
        "y": 1660,
        "wires": []
    },
    {
        "id": "login_failure",
        "type": "http response",
        "z": "11307a2a2fe08886",
        "name": "Login Failure",
        "statusCode": "",
        "headers": {},
        "x": 890,
        "y": 1720,
        "wires": []
    },
    {
        "id": "831ac32042ef0f37",
        "type": "comment",
        "z": "11307a2a2fe08886",
        "name": "로그인 구현",
        "info": "",
        "x": 150,
        "y": 1420,
        "wires": []
    },
    {
        "id": "f9a536a474c23aa2",
        "type": "inject",
        "z": "11307a2a2fe08886",
        "name": "Prepare",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 900,
        "wires": [
            [
                "62bbc19044b0c277"
            ]
        ]
    },
    {
        "id": "8e48d90f82a7e129",
        "type": "debug",
        "z": "11307a2a2fe08886",
        "name": "Done",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 510,
        "y": 900,
        "wires": []
    },
    {
        "id": "62bbc19044b0c277",
        "type": "postgresql",
        "z": "11307a2a2fe08886",
        "name": "",
        "query": "SELECT * FROM users;",
        "postgreSQLConfig": "a66d31f412504030",
        "split": true,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 310,
        "y": 900,
        "wires": [
            [
                "8e48d90f82a7e129"
            ]
        ]
    },
    {
        "id": "f31265edcd4d2aee",
        "type": "http in",
        "z": "11307a2a2fe08886",
        "name": "Receive SQL POST",
        "url": "/data",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 1200,
        "y": 1060,
        "wires": [
            [
                "ebf34b399ab01cb2"
            ]
        ]
    },
    {
        "id": "ebf34b399ab01cb2",
        "type": "function",
        "z": "11307a2a2fe08886",
        "name": "Store SQL Query",
        "func": "let sqlQuery = msg.req.body.query;\nif (sqlQuery) {\n    flow.set('storedQuery', sqlQuery); // 플로우 컨텍스트에 저장\n    msg.payload = { success: true, message: 'Query received and stored' };\n} else {\n    msg.payload = { success: false, message: 'No query received' };\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1440,
        "y": 1060,
        "wires": [
            [
                "eb480e7d9bd42e34",
                "7d6240c6084158bd"
            ]
        ]
    },
    {
        "id": "ac4cfa92caf64f7d",
        "type": "http in",
        "z": "11307a2a2fe08886",
        "name": "Execute SQL on GET",
        "url": "/execute-query",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 1230,
        "y": 1240,
        "wires": [
            [
                "fb6e31a1a52c1af0",
                "e00f49a7b8b9ddc8"
            ]
        ]
    },
    {
        "id": "fb6e31a1a52c1af0",
        "type": "function",
        "z": "11307a2a2fe08886",
        "name": "Retrieve Stored Query",
        "func": "let sqlQuery = flow.get('storedQuery');\nif (sqlQuery) {\n    msg.query = sqlQuery;\n    return msg;\n} else {\n    msg.payload = { success: false, message: 'No query stored' };\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1480,
        "y": 1240,
        "wires": [
            [
                "eb480e7d9bd42e34",
                "96ffcb29584eda02"
            ]
        ]
    },
    {
        "id": "e00f49a7b8b9ddc8",
        "type": "http response",
        "z": "11307a2a2fe08886",
        "name": "Send GET Response",
        "statusCode": "",
        "headers": {},
        "x": 1610,
        "y": 1380,
        "wires": []
    },
    {
        "id": "96ffcb29584eda02",
        "type": "debug",
        "z": "11307a2a2fe08886",
        "name": "Show SQL Query",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "query",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1840,
        "y": 1240,
        "wires": []
    },
    {
        "id": "eb480e7d9bd42e34",
        "type": "postgresql",
        "z": "11307a2a2fe08886",
        "name": "Execute PostgreSQL Query",
        "query": "",
        "postgreSQLConfig": "a66d31f412504030",
        "split": false,
        "rowsPerMsg": "",
        "outputs": 1,
        "x": 1830,
        "y": 1060,
        "wires": [
            [
                "42b1554ee16d5cc2"
            ]
        ]
    },
    {
        "id": "7d6240c6084158bd",
        "type": "http response",
        "z": "11307a2a2fe08886",
        "name": "Send POST Response",
        "statusCode": "200",
        "headers": {},
        "x": 1710,
        "y": 980,
        "wires": []
    },
    {
        "id": "42b1554ee16d5cc2",
        "type": "debug",
        "z": "11307a2a2fe08886",
        "name": "Debug Query Result",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2170,
        "y": 1060,
        "wires": []
    },
    {
        "id": "3c4c5776f00346ba",
        "type": "inject",
        "z": "11307a2a2fe08886",
        "name": "Trigger POST Request",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 1080,
        "wires": [
            [
                "8b2236ca335f1205"
            ]
        ]
    },
    {
        "id": "8b2236ca335f1205",
        "type": "function",
        "z": "11307a2a2fe08886",
        "name": "Prepare POST Data",
        "func": "msg.method = 'POST';\nmsg.url = 'http://localhost:1880/data';\nmsg.headers = {'Content-Type': 'application/json'};\nmsg.payload = {\"query\": \"SELECT * FROM users;\"};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 1080,
        "wires": [
            [
                "5cbaa7e43c7a3408"
            ]
        ]
    },
    {
        "id": "5cbaa7e43c7a3408",
        "type": "http request",
        "z": "11307a2a2fe08886",
        "name": "Send POST Request",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:1880/data",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 650,
        "y": 1080,
        "wires": [
            [
                "cc1e3a49c594331a"
            ]
        ]
    },
    {
        "id": "cc1e3a49c594331a",
        "type": "debug",
        "z": "11307a2a2fe08886",
        "name": "Debug POST Response",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 1080,
        "wires": []
    },
    {
        "id": "e651a1c674881931",
        "type": "inject",
        "z": "11307a2a2fe08886",
        "name": "Trigger GET Request",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 1220,
        "wires": [
            [
                "aebe907efa937cc9"
            ]
        ]
    },
    {
        "id": "aebe907efa937cc9",
        "type": "function",
        "z": "11307a2a2fe08886",
        "name": "Prepare GET Data",
        "func": "msg.method = 'GET';\nmsg.url = 'http://localhost:1880/execute-query';\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1220,
        "wires": [
            [
                "3eefbe91e87e518c"
            ]
        ]
    },
    {
        "id": "3eefbe91e87e518c",
        "type": "http request",
        "z": "11307a2a2fe08886",
        "name": "Send GET Request",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:1880/execute-query",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 670,
        "y": 1220,
        "wires": [
            [
                "0c2d576e55308513"
            ]
        ]
    },
    {
        "id": "0c2d576e55308513",
        "type": "debug",
        "z": "11307a2a2fe08886",
        "name": "Debug GET Response",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 1220,
        "wires": []
    },
    {
        "id": "d5e7e1b714dd616b",
        "type": "ui_spacer",
        "z": "11307a2a2fe08886",
        "name": "spacer",
        "group": "dashboard-group-id",
        "order": 2,
        "width": 5,
        "height": 1
    },
    {
        "id": "53594343fc5b90e3",
        "type": "ui_spacer",
        "z": "11307a2a2fe08886",
        "name": "spacer",
        "group": "dashboard-group-id",
        "order": 4,
        "width": 5,
        "height": 1
    },
    {
        "id": "6778be92bb4696c8",
        "type": "ui_spacer",
        "z": "11307a2a2fe08886",
        "name": "spacer",
        "group": "dashboard-group-id",
        "order": 5,
        "width": 5,
        "height": 1
    },
    {
        "id": "92a6e62cdd88c183",
        "type": "ui_spacer",
        "z": "11307a2a2fe08886",
        "name": "spacer",
        "group": "dashboard-group-id",
        "order": 6,
        "width": 5,
        "height": 1
    },
    {
        "id": "9b9ff574a8de11db",
        "type": "ui_spacer",
        "z": "11307a2a2fe08886",
        "name": "spacer",
        "group": "dashboard-group-id",
        "order": 7,
        "width": 5,
        "height": 1
    },
    {
        "id": "1b99f9a633263546",
        "type": "ui_spacer",
        "z": "11307a2a2fe08886",
        "name": "spacer",
        "group": "dashboard-group-id",
        "order": 8,
        "width": 5,
        "height": 1
    },
    {
        "id": "8e6f4e7c7fa426b5",
        "type": "ui_spacer",
        "z": "11307a2a2fe08886",
        "name": "spacer",
        "group": "dashboard-group-id",
        "order": 9,
        "width": 5,
        "height": 1
    },
    {
        "id": "3f5247705f0da8ea",
        "type": "ui_spacer",
        "z": "11307a2a2fe08886",
        "name": "spacer",
        "group": "dashboard-group-id",
        "order": 10,
        "width": 5,
        "height": 1
    },
    {
        "id": "40ed50a05ef90ad7",
        "type": "ui_spacer",
        "z": "11307a2a2fe08886",
        "name": "spacer",
        "group": "cb0e6dfde30c2ae0",
        "order": 2,
        "width": 8,
        "height": 1
    },
    {
        "id": "ed8bad05cc1ece42",
        "type": "ui_spacer",
        "z": "11307a2a2fe08886",
        "name": "spacer",
        "group": "cb0e6dfde30c2ae0",
        "order": 3,
        "width": 2,
        "height": 1
    },
    {
        "id": "43c2063881dddc6f",
        "type": "ui_spacer",
        "z": "11307a2a2fe08886",
        "name": "spacer",
        "group": "cb0e6dfde30c2ae0",
        "order": 5,
        "width": 1,
        "height": 1
    },
    {
        "id": "1d6cbcdce268ed1a",
        "type": "ui_spacer",
        "z": "11307a2a2fe08886",
        "name": "spacer",
        "group": "cb0e6dfde30c2ae0",
        "order": 6,
        "width": 2,
        "height": 1
    },
    {
        "id": "d43d741d2641cd44",
        "type": "ui_spacer",
        "z": "11307a2a2fe08886",
        "name": "spacer",
        "group": "cb0e6dfde30c2ae0",
        "order": 7,
        "width": 1,
        "height": 1
    },
    {
        "id": "06095e5d93974a7b",
        "type": "ui_spacer",
        "z": "11307a2a2fe08886",
        "name": "spacer",
        "group": "cb0e6dfde30c2ae0",
        "order": 8,
        "width": 2,
        "height": 1
    },
    {
        "id": "0610f51b4342490d",
        "type": "ui_spacer",
        "z": "11307a2a2fe08886",
        "name": "spacer",
        "group": "cb0e6dfde30c2ae0",
        "order": 9,
        "width": 1,
        "height": 1
    },
    {
        "id": "f28a9e432a00a92f",
        "type": "ui_spacer",
        "z": "11307a2a2fe08886",
        "name": "spacer",
        "group": "cb0e6dfde30c2ae0",
        "order": 10,
        "width": 2,
        "height": 1
    },
    {
        "id": "67f98b90e2bc6985",
        "type": "ui_spacer",
        "z": "11307a2a2fe08886",
        "name": "spacer",
        "group": "cb0e6dfde30c2ae0",
        "order": 11,
        "width": 1,
        "height": 1
    },
    {
        "id": "ca4888c7b18ae9f3",
        "type": "ui_spacer",
        "z": "11307a2a2fe08886",
        "name": "spacer",
        "group": "cb0e6dfde30c2ae0",
        "order": 12,
        "width": 2,
        "height": 1
    },
    {
        "id": "4f1d3f17e94968ba",
        "type": "ui_spacer",
        "z": "11307a2a2fe08886",
        "name": "spacer",
        "group": "cb0e6dfde30c2ae0",
        "order": 13,
        "width": 1,
        "height": 1
    },
    {
        "id": "061a817de96035eb",
        "type": "ui_spacer",
        "z": "11307a2a2fe08886",
        "name": "spacer",
        "group": "cb0e6dfde30c2ae0",
        "order": 14,
        "width": 8,
        "height": 1
    },
    {
        "id": "influxdb1",
        "type": "influxdb",
        "hostname": "localhost",
        "port": "8086",
        "protocol": "http",
        "database": "",
        "name": "InfluxDB 2.7 - AMPds2",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://localhost:8086",
        "timeout": "",
        "rejectUnauthorized": false
    },
    {
        "id": "dashboard-group-id",
        "type": "ui_group",
        "name": "전기_B2E_active_power",
        "tab": "dashboard-tab-id",
        "order": 2,
        "disp": true,
        "width": "16",
        "collapse": false,
        "className": ""
    },
    {
        "id": "cb0e6dfde30c2ae0",
        "type": "ui_group",
        "name": "전기_B2E_active_power",
        "tab": "e7dc91b638265889",
        "order": 1,
        "disp": true,
        "width": "16",
        "collapse": false,
        "className": ""
    },
    {
        "id": "a66d31f412504030",
        "type": "postgreSQLConfig",
        "name": "",
        "host": "127.0.0.1",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "atg",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "postgres",
        "userFieldType": "str",
        "password": "admin1234",
        "passwordFieldType": "str"
    },
    {
        "id": "dashboard-tab-id",
        "type": "ui_tab",
        "name": "Old Data",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "e7dc91b638265889",
        "type": "ui_tab",
        "name": "Live Data (Streaming)",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    }
]
